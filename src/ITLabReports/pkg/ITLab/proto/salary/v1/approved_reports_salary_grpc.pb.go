// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package services

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ApprovedReportsSalaryClient is the client API for ApprovedReportsSalary service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApprovedReportsSalaryClient interface {
	// Return aproved report by id
	// In Reason will be ReportEntity
	GetReportSalary(ctx context.Context, in *GetApprovedReportReq, opts ...grpc.CallOption) (*GetApprovedReportResp, error)
	// Return aproved reports for user
	// In Reason will be ReportEntity
	GetReportsSalaryForUser(ctx context.Context, in *GetApprovedReportsForUserReq, opts ...grpc.CallOption) (*GetApprovedReportsForUserResp, error)
	// Return approved reports id
	// Ordinal user must explicitly pass the user_id parameter and get approved reports.
	// Admin user can pass user_id for reports about specific user, or ignore it to get all approved reports ids
	GetApprovedReportsId(ctx context.Context, in *GetApprovedReportsIdReq, opts ...grpc.CallOption) (*GetApprovedReportsIdResp, error)
}

type approvedReportsSalaryClient struct {
	cc grpc.ClientConnInterface
}

func NewApprovedReportsSalaryClient(cc grpc.ClientConnInterface) ApprovedReportsSalaryClient {
	return &approvedReportsSalaryClient{cc}
}

func (c *approvedReportsSalaryClient) GetReportSalary(ctx context.Context, in *GetApprovedReportReq, opts ...grpc.CallOption) (*GetApprovedReportResp, error) {
	out := new(GetApprovedReportResp)
	err := c.cc.Invoke(ctx, "/rtuitlab.itlab.salary.v1.ApprovedReportsSalary/GetReportSalary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *approvedReportsSalaryClient) GetReportsSalaryForUser(ctx context.Context, in *GetApprovedReportsForUserReq, opts ...grpc.CallOption) (*GetApprovedReportsForUserResp, error) {
	out := new(GetApprovedReportsForUserResp)
	err := c.cc.Invoke(ctx, "/rtuitlab.itlab.salary.v1.ApprovedReportsSalary/GetReportsSalaryForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *approvedReportsSalaryClient) GetApprovedReportsId(ctx context.Context, in *GetApprovedReportsIdReq, opts ...grpc.CallOption) (*GetApprovedReportsIdResp, error) {
	out := new(GetApprovedReportsIdResp)
	err := c.cc.Invoke(ctx, "/rtuitlab.itlab.salary.v1.ApprovedReportsSalary/GetApprovedReportsId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApprovedReportsSalaryServer is the server API for ApprovedReportsSalary service.
// All implementations must embed UnimplementedApprovedReportsSalaryServer
// for forward compatibility
type ApprovedReportsSalaryServer interface {
	// Return aproved report by id
	// In Reason will be ReportEntity
	GetReportSalary(context.Context, *GetApprovedReportReq) (*GetApprovedReportResp, error)
	// Return aproved reports for user
	// In Reason will be ReportEntity
	GetReportsSalaryForUser(context.Context, *GetApprovedReportsForUserReq) (*GetApprovedReportsForUserResp, error)
	// Return approved reports id
	// Ordinal user must explicitly pass the user_id parameter and get approved reports.
	// Admin user can pass user_id for reports about specific user, or ignore it to get all approved reports ids
	GetApprovedReportsId(context.Context, *GetApprovedReportsIdReq) (*GetApprovedReportsIdResp, error)
	mustEmbedUnimplementedApprovedReportsSalaryServer()
}

// UnimplementedApprovedReportsSalaryServer must be embedded to have forward compatible implementations.
type UnimplementedApprovedReportsSalaryServer struct {
}

func (UnimplementedApprovedReportsSalaryServer) GetReportSalary(context.Context, *GetApprovedReportReq) (*GetApprovedReportResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReportSalary not implemented")
}
func (UnimplementedApprovedReportsSalaryServer) GetReportsSalaryForUser(context.Context, *GetApprovedReportsForUserReq) (*GetApprovedReportsForUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReportsSalaryForUser not implemented")
}
func (UnimplementedApprovedReportsSalaryServer) GetApprovedReportsId(context.Context, *GetApprovedReportsIdReq) (*GetApprovedReportsIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApprovedReportsId not implemented")
}
func (UnimplementedApprovedReportsSalaryServer) mustEmbedUnimplementedApprovedReportsSalaryServer() {}

// UnsafeApprovedReportsSalaryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApprovedReportsSalaryServer will
// result in compilation errors.
type UnsafeApprovedReportsSalaryServer interface {
	mustEmbedUnimplementedApprovedReportsSalaryServer()
}

func RegisterApprovedReportsSalaryServer(s grpc.ServiceRegistrar, srv ApprovedReportsSalaryServer) {
	s.RegisterService(&_ApprovedReportsSalary_serviceDesc, srv)
}

func _ApprovedReportsSalary_GetReportSalary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApprovedReportReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApprovedReportsSalaryServer).GetReportSalary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rtuitlab.itlab.salary.v1.ApprovedReportsSalary/GetReportSalary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApprovedReportsSalaryServer).GetReportSalary(ctx, req.(*GetApprovedReportReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApprovedReportsSalary_GetReportsSalaryForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApprovedReportsForUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApprovedReportsSalaryServer).GetReportsSalaryForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rtuitlab.itlab.salary.v1.ApprovedReportsSalary/GetReportsSalaryForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApprovedReportsSalaryServer).GetReportsSalaryForUser(ctx, req.(*GetApprovedReportsForUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApprovedReportsSalary_GetApprovedReportsId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApprovedReportsIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApprovedReportsSalaryServer).GetApprovedReportsId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rtuitlab.itlab.salary.v1.ApprovedReportsSalary/GetApprovedReportsId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApprovedReportsSalaryServer).GetApprovedReportsId(ctx, req.(*GetApprovedReportsIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _ApprovedReportsSalary_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rtuitlab.itlab.salary.v1.ApprovedReportsSalary",
	HandlerType: (*ApprovedReportsSalaryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetReportSalary",
			Handler:    _ApprovedReportsSalary_GetReportSalary_Handler,
		},
		{
			MethodName: "GetReportsSalaryForUser",
			Handler:    _ApprovedReportsSalary_GetReportsSalaryForUser_Handler,
		},
		{
			MethodName: "GetApprovedReportsId",
			Handler:    _ApprovedReportsSalary_GetApprovedReportsId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rtuitlab/itlab/salary/v1/approved_reports_salary.proto",
}
