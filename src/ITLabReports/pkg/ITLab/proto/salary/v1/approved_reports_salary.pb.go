// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.19.4
// source: rtuitlab/itlab/salary/v1/approved_reports_salary.proto

package services

import (
	types "github.com/RTUITLab/ITLab/proto/salary/types"
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type GetReportSalaryErrors int32

const (
	GetReportSalaryErrors_REPORT_SALARY_NOT_FOUND GetReportSalaryErrors = 0
)

// Enum value maps for GetReportSalaryErrors.
var (
	GetReportSalaryErrors_name = map[int32]string{
		0: "REPORT_SALARY_NOT_FOUND",
	}
	GetReportSalaryErrors_value = map[string]int32{
		"REPORT_SALARY_NOT_FOUND": 0,
	}
)

func (x GetReportSalaryErrors) Enum() *GetReportSalaryErrors {
	p := new(GetReportSalaryErrors)
	*p = x
	return p
}

func (x GetReportSalaryErrors) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetReportSalaryErrors) Descriptor() protoreflect.EnumDescriptor {
	return file_rtuitlab_itlab_salary_v1_approved_reports_salary_proto_enumTypes[0].Descriptor()
}

func (GetReportSalaryErrors) Type() protoreflect.EnumType {
	return &file_rtuitlab_itlab_salary_v1_approved_reports_salary_proto_enumTypes[0]
}

func (x GetReportSalaryErrors) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetReportSalaryErrors.Descriptor instead.
func (GetReportSalaryErrors) EnumDescriptor() ([]byte, []int) {
	return file_rtuitlab_itlab_salary_v1_approved_reports_salary_proto_rawDescGZIP(), []int{0}
}

type GetApprovedReportReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReportId string `protobuf:"bytes,1,opt,name=report_id,json=reportId,proto3" json:"report_id,omitempty"`
}

func (x *GetApprovedReportReq) Reset() {
	*x = GetApprovedReportReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtuitlab_itlab_salary_v1_approved_reports_salary_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetApprovedReportReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetApprovedReportReq) ProtoMessage() {}

func (x *GetApprovedReportReq) ProtoReflect() protoreflect.Message {
	mi := &file_rtuitlab_itlab_salary_v1_approved_reports_salary_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetApprovedReportReq.ProtoReflect.Descriptor instead.
func (*GetApprovedReportReq) Descriptor() ([]byte, []int) {
	return file_rtuitlab_itlab_salary_v1_approved_reports_salary_proto_rawDescGZIP(), []int{0}
}

func (x *GetApprovedReportReq) GetReportId() string {
	if x != nil {
		return x.ReportId
	}
	return ""
}

type GetApprovedReportResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Result:
	//	*GetApprovedReportResp_Report
	//	*GetApprovedReportResp_Error
	Result isGetApprovedReportResp_Result `protobuf_oneof:"result"`
}

func (x *GetApprovedReportResp) Reset() {
	*x = GetApprovedReportResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtuitlab_itlab_salary_v1_approved_reports_salary_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetApprovedReportResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetApprovedReportResp) ProtoMessage() {}

func (x *GetApprovedReportResp) ProtoReflect() protoreflect.Message {
	mi := &file_rtuitlab_itlab_salary_v1_approved_reports_salary_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetApprovedReportResp.ProtoReflect.Descriptor instead.
func (*GetApprovedReportResp) Descriptor() ([]byte, []int) {
	return file_rtuitlab_itlab_salary_v1_approved_reports_salary_proto_rawDescGZIP(), []int{1}
}

func (m *GetApprovedReportResp) GetResult() isGetApprovedReportResp_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (x *GetApprovedReportResp) GetReport() *types.Salary {
	if x, ok := x.GetResult().(*GetApprovedReportResp_Report); ok {
		return x.Report
	}
	return nil
}

func (x *GetApprovedReportResp) GetError() GetReportSalaryErrors {
	if x, ok := x.GetResult().(*GetApprovedReportResp_Error); ok {
		return x.Error
	}
	return GetReportSalaryErrors_REPORT_SALARY_NOT_FOUND
}

type isGetApprovedReportResp_Result interface {
	isGetApprovedReportResp_Result()
}

type GetApprovedReportResp_Report struct {
	Report *types.Salary `protobuf:"bytes,1,opt,name=report,proto3,oneof"`
}

type GetApprovedReportResp_Error struct {
	Error GetReportSalaryErrors `protobuf:"varint,2,opt,name=error,proto3,enum=rtuitlab.itlab.salary.v1.GetReportSalaryErrors,oneof"`
}

func (*GetApprovedReportResp_Report) isGetApprovedReportResp_Result() {}

func (*GetApprovedReportResp_Error) isGetApprovedReportResp_Result() {}

type GetApprovedReportsForUserReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *GetApprovedReportsForUserReq) Reset() {
	*x = GetApprovedReportsForUserReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtuitlab_itlab_salary_v1_approved_reports_salary_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetApprovedReportsForUserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetApprovedReportsForUserReq) ProtoMessage() {}

func (x *GetApprovedReportsForUserReq) ProtoReflect() protoreflect.Message {
	mi := &file_rtuitlab_itlab_salary_v1_approved_reports_salary_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetApprovedReportsForUserReq.ProtoReflect.Descriptor instead.
func (*GetApprovedReportsForUserReq) Descriptor() ([]byte, []int) {
	return file_rtuitlab_itlab_salary_v1_approved_reports_salary_proto_rawDescGZIP(), []int{2}
}

func (x *GetApprovedReportsForUserReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type GetApprovedReportsForUserResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// In all approved salary in reason will be ReportEntity
	Reports []*types.Salary `protobuf:"bytes,1,rep,name=reports,proto3" json:"reports,omitempty"`
}

func (x *GetApprovedReportsForUserResp) Reset() {
	*x = GetApprovedReportsForUserResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtuitlab_itlab_salary_v1_approved_reports_salary_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetApprovedReportsForUserResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetApprovedReportsForUserResp) ProtoMessage() {}

func (x *GetApprovedReportsForUserResp) ProtoReflect() protoreflect.Message {
	mi := &file_rtuitlab_itlab_salary_v1_approved_reports_salary_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetApprovedReportsForUserResp.ProtoReflect.Descriptor instead.
func (*GetApprovedReportsForUserResp) Descriptor() ([]byte, []int) {
	return file_rtuitlab_itlab_salary_v1_approved_reports_salary_proto_rawDescGZIP(), []int{3}
}

func (x *GetApprovedReportsForUserResp) GetReports() []*types.Salary {
	if x != nil {
		return x.Reports
	}
	return nil
}

type GetApprovedReportsIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId *string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3,oneof" json:"user_id,omitempty"`
}

func (x *GetApprovedReportsIdReq) Reset() {
	*x = GetApprovedReportsIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtuitlab_itlab_salary_v1_approved_reports_salary_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetApprovedReportsIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetApprovedReportsIdReq) ProtoMessage() {}

func (x *GetApprovedReportsIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_rtuitlab_itlab_salary_v1_approved_reports_salary_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetApprovedReportsIdReq.ProtoReflect.Descriptor instead.
func (*GetApprovedReportsIdReq) Descriptor() ([]byte, []int) {
	return file_rtuitlab_itlab_salary_v1_approved_reports_salary_proto_rawDescGZIP(), []int{4}
}

func (x *GetApprovedReportsIdReq) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

type GetApprovedReportsIdResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReportId []string `protobuf:"bytes,1,rep,name=report_id,json=reportId,proto3" json:"report_id,omitempty"`
}

func (x *GetApprovedReportsIdResp) Reset() {
	*x = GetApprovedReportsIdResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtuitlab_itlab_salary_v1_approved_reports_salary_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetApprovedReportsIdResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetApprovedReportsIdResp) ProtoMessage() {}

func (x *GetApprovedReportsIdResp) ProtoReflect() protoreflect.Message {
	mi := &file_rtuitlab_itlab_salary_v1_approved_reports_salary_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetApprovedReportsIdResp.ProtoReflect.Descriptor instead.
func (*GetApprovedReportsIdResp) Descriptor() ([]byte, []int) {
	return file_rtuitlab_itlab_salary_v1_approved_reports_salary_proto_rawDescGZIP(), []int{5}
}

func (x *GetApprovedReportsIdResp) GetReportId() []string {
	if x != nil {
		return x.ReportId
	}
	return nil
}

var File_rtuitlab_itlab_salary_v1_approved_reports_salary_proto protoreflect.FileDescriptor

var file_rtuitlab_itlab_salary_v1_approved_reports_salary_proto_rawDesc = []byte{
	0x0a, 0x36, 0x72, 0x74, 0x75, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2f, 0x69, 0x74, 0x6c, 0x61, 0x62,
	0x2f, 0x73, 0x61, 0x6c, 0x61, 0x72, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x73, 0x61, 0x6c, 0x61,
	0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x72, 0x74, 0x75, 0x69, 0x74, 0x6c,
	0x61, 0x62, 0x2e, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x73, 0x61, 0x6c, 0x61, 0x72, 0x79, 0x2e,
	0x76, 0x31, 0x1a, 0x21, 0x72, 0x74, 0x75, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2f, 0x69, 0x74, 0x6c,
	0x61, 0x62, 0x2f, 0x73, 0x61, 0x6c, 0x61, 0x72, 0x79, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x33, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1b, 0x0a,
	0x09, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x22, 0xa3, 0x01, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x37, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x74, 0x75, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e,
	0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x73, 0x61, 0x6c, 0x61, 0x72, 0x79, 0x2e, 0x53, 0x61, 0x6c,
	0x61, 0x72, 0x79, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x47, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x72,
	0x74, 0x75, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x73, 0x61,
	0x6c, 0x61, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x53, 0x61, 0x6c, 0x61, 0x72, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x48, 0x00, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x37, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x58, 0x0a, 0x1d, 0x47, 0x65, 0x74,
	0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x46,
	0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x37, 0x0a, 0x07, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x74,
	0x75, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x73, 0x61, 0x6c,
	0x61, 0x72, 0x79, 0x2e, 0x53, 0x61, 0x6c, 0x61, 0x72, 0x79, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x22, 0x43, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1c,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22, 0x37, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x49, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49,
	0x64, 0x2a, 0x34, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x61,
	0x6c, 0x61, 0x72, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x45,
	0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x41, 0x4c, 0x41, 0x52, 0x59, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x00, 0x32, 0x97, 0x03, 0x0a, 0x15, 0x41, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x53, 0x61, 0x6c, 0x61, 0x72,
	0x79, 0x12, 0x72, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x61,
	0x6c, 0x61, 0x72, 0x79, 0x12, 0x2e, 0x2e, 0x72, 0x74, 0x75, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e,
	0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x73, 0x61, 0x6c, 0x61, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x2f, 0x2e, 0x72, 0x74, 0x75, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e,
	0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x73, 0x61, 0x6c, 0x61, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x8a, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x53, 0x61, 0x6c, 0x61, 0x72, 0x79, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x36, 0x2e, 0x72, 0x74, 0x75, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x69, 0x74, 0x6c,
	0x61, 0x62, 0x2e, 0x73, 0x61, 0x6c, 0x61, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x46,
	0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x37, 0x2e, 0x72, 0x74, 0x75, 0x69,
	0x74, 0x6c, 0x61, 0x62, 0x2e, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x73, 0x61, 0x6c, 0x61, 0x72,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x7d, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x49, 0x64, 0x12, 0x31, 0x2e, 0x72, 0x74, 0x75,
	0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x73, 0x61, 0x6c, 0x61,
	0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x32, 0x2e,
	0x72, 0x74, 0x75, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x73,
	0x61, 0x6c, 0x61, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x49, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x42, 0x67, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x52, 0x54, 0x55, 0x49, 0x54, 0x4c, 0x61, 0x62, 0x2f, 0x49, 0x54, 0x4c, 0x61, 0x62, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x61, 0x6c, 0x61, 0x72, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x3b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0xaa, 0x02, 0x27, 0x52, 0x54, 0x55, 0x49, 0x54, 0x4c, 0x61, 0x62, 0x2e, 0x49, 0x54, 0x4c, 0x61,
	0x62, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x61, 0x6c, 0x61, 0x72, 0x79, 0x2e, 0x56,
	0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_rtuitlab_itlab_salary_v1_approved_reports_salary_proto_rawDescOnce sync.Once
	file_rtuitlab_itlab_salary_v1_approved_reports_salary_proto_rawDescData = file_rtuitlab_itlab_salary_v1_approved_reports_salary_proto_rawDesc
)

func file_rtuitlab_itlab_salary_v1_approved_reports_salary_proto_rawDescGZIP() []byte {
	file_rtuitlab_itlab_salary_v1_approved_reports_salary_proto_rawDescOnce.Do(func() {
		file_rtuitlab_itlab_salary_v1_approved_reports_salary_proto_rawDescData = protoimpl.X.CompressGZIP(file_rtuitlab_itlab_salary_v1_approved_reports_salary_proto_rawDescData)
	})
	return file_rtuitlab_itlab_salary_v1_approved_reports_salary_proto_rawDescData
}

var file_rtuitlab_itlab_salary_v1_approved_reports_salary_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_rtuitlab_itlab_salary_v1_approved_reports_salary_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_rtuitlab_itlab_salary_v1_approved_reports_salary_proto_goTypes = []interface{}{
	(GetReportSalaryErrors)(0),            // 0: rtuitlab.itlab.salary.v1.GetReportSalaryErrors
	(*GetApprovedReportReq)(nil),          // 1: rtuitlab.itlab.salary.v1.GetApprovedReportReq
	(*GetApprovedReportResp)(nil),         // 2: rtuitlab.itlab.salary.v1.GetApprovedReportResp
	(*GetApprovedReportsForUserReq)(nil),  // 3: rtuitlab.itlab.salary.v1.GetApprovedReportsForUserReq
	(*GetApprovedReportsForUserResp)(nil), // 4: rtuitlab.itlab.salary.v1.GetApprovedReportsForUserResp
	(*GetApprovedReportsIdReq)(nil),       // 5: rtuitlab.itlab.salary.v1.GetApprovedReportsIdReq
	(*GetApprovedReportsIdResp)(nil),      // 6: rtuitlab.itlab.salary.v1.GetApprovedReportsIdResp
	(*types.Salary)(nil),                  // 7: rtuitlab.itlab.salary.Salary
}
var file_rtuitlab_itlab_salary_v1_approved_reports_salary_proto_depIdxs = []int32{
	7, // 0: rtuitlab.itlab.salary.v1.GetApprovedReportResp.report:type_name -> rtuitlab.itlab.salary.Salary
	0, // 1: rtuitlab.itlab.salary.v1.GetApprovedReportResp.error:type_name -> rtuitlab.itlab.salary.v1.GetReportSalaryErrors
	7, // 2: rtuitlab.itlab.salary.v1.GetApprovedReportsForUserResp.reports:type_name -> rtuitlab.itlab.salary.Salary
	1, // 3: rtuitlab.itlab.salary.v1.ApprovedReportsSalary.GetReportSalary:input_type -> rtuitlab.itlab.salary.v1.GetApprovedReportReq
	3, // 4: rtuitlab.itlab.salary.v1.ApprovedReportsSalary.GetReportsSalaryForUser:input_type -> rtuitlab.itlab.salary.v1.GetApprovedReportsForUserReq
	5, // 5: rtuitlab.itlab.salary.v1.ApprovedReportsSalary.GetApprovedReportsId:input_type -> rtuitlab.itlab.salary.v1.GetApprovedReportsIdReq
	2, // 6: rtuitlab.itlab.salary.v1.ApprovedReportsSalary.GetReportSalary:output_type -> rtuitlab.itlab.salary.v1.GetApprovedReportResp
	4, // 7: rtuitlab.itlab.salary.v1.ApprovedReportsSalary.GetReportsSalaryForUser:output_type -> rtuitlab.itlab.salary.v1.GetApprovedReportsForUserResp
	6, // 8: rtuitlab.itlab.salary.v1.ApprovedReportsSalary.GetApprovedReportsId:output_type -> rtuitlab.itlab.salary.v1.GetApprovedReportsIdResp
	6, // [6:9] is the sub-list for method output_type
	3, // [3:6] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_rtuitlab_itlab_salary_v1_approved_reports_salary_proto_init() }
func file_rtuitlab_itlab_salary_v1_approved_reports_salary_proto_init() {
	if File_rtuitlab_itlab_salary_v1_approved_reports_salary_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rtuitlab_itlab_salary_v1_approved_reports_salary_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetApprovedReportReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtuitlab_itlab_salary_v1_approved_reports_salary_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetApprovedReportResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtuitlab_itlab_salary_v1_approved_reports_salary_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetApprovedReportsForUserReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtuitlab_itlab_salary_v1_approved_reports_salary_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetApprovedReportsForUserResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtuitlab_itlab_salary_v1_approved_reports_salary_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetApprovedReportsIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtuitlab_itlab_salary_v1_approved_reports_salary_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetApprovedReportsIdResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_rtuitlab_itlab_salary_v1_approved_reports_salary_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*GetApprovedReportResp_Report)(nil),
		(*GetApprovedReportResp_Error)(nil),
	}
	file_rtuitlab_itlab_salary_v1_approved_reports_salary_proto_msgTypes[4].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rtuitlab_itlab_salary_v1_approved_reports_salary_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_rtuitlab_itlab_salary_v1_approved_reports_salary_proto_goTypes,
		DependencyIndexes: file_rtuitlab_itlab_salary_v1_approved_reports_salary_proto_depIdxs,
		EnumInfos:         file_rtuitlab_itlab_salary_v1_approved_reports_salary_proto_enumTypes,
		MessageInfos:      file_rtuitlab_itlab_salary_v1_approved_reports_salary_proto_msgTypes,
	}.Build()
	File_rtuitlab_itlab_salary_v1_approved_reports_salary_proto = out.File
	file_rtuitlab_itlab_salary_v1_approved_reports_salary_proto_rawDesc = nil
	file_rtuitlab_itlab_salary_v1_approved_reports_salary_proto_goTypes = nil
	file_rtuitlab_itlab_salary_v1_approved_reports_salary_proto_depIdxs = nil
}
