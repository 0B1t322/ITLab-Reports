// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.19.4
// source: rtuitlab/itlab/reports/v1/reports.proto

package services

import (
	types "github.com/RTUITLab/ITLab/proto/reports/types"
	shared "github.com/RTUITLab/ITLab/proto/shared"
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ReportsServiceErrors int32

const (
	ReportsServiceErrors_REPORT_NOT_FOUND ReportsServiceErrors = 0
)

// Enum value maps for ReportsServiceErrors.
var (
	ReportsServiceErrors_name = map[int32]string{
		0: "REPORT_NOT_FOUND",
	}
	ReportsServiceErrors_value = map[string]int32{
		"REPORT_NOT_FOUND": 0,
	}
)

func (x ReportsServiceErrors) Enum() *ReportsServiceErrors {
	p := new(ReportsServiceErrors)
	*p = x
	return p
}

func (x ReportsServiceErrors) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReportsServiceErrors) Descriptor() protoreflect.EnumDescriptor {
	return file_rtuitlab_itlab_reports_v1_reports_proto_enumTypes[0].Descriptor()
}

func (ReportsServiceErrors) Type() protoreflect.EnumType {
	return &file_rtuitlab_itlab_reports_v1_reports_proto_enumTypes[0]
}

func (x ReportsServiceErrors) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReportsServiceErrors.Descriptor instead.
func (ReportsServiceErrors) EnumDescriptor() ([]byte, []int) {
	return file_rtuitlab_itlab_reports_v1_reports_proto_rawDescGZIP(), []int{0}
}

type GetReportsReq_SortedBy int32

const (
	GetReportsReq_NAME GetReportsReq_SortedBy = 0
	GetReportsReq_DATE GetReportsReq_SortedBy = 1
)

// Enum value maps for GetReportsReq_SortedBy.
var (
	GetReportsReq_SortedBy_name = map[int32]string{
		0: "NAME",
		1: "DATE",
	}
	GetReportsReq_SortedBy_value = map[string]int32{
		"NAME": 0,
		"DATE": 1,
	}
)

func (x GetReportsReq_SortedBy) Enum() *GetReportsReq_SortedBy {
	p := new(GetReportsReq_SortedBy)
	*p = x
	return p
}

func (x GetReportsReq_SortedBy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetReportsReq_SortedBy) Descriptor() protoreflect.EnumDescriptor {
	return file_rtuitlab_itlab_reports_v1_reports_proto_enumTypes[1].Descriptor()
}

func (GetReportsReq_SortedBy) Type() protoreflect.EnumType {
	return &file_rtuitlab_itlab_reports_v1_reports_proto_enumTypes[1]
}

func (x GetReportsReq_SortedBy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetReportsReq_SortedBy.Descriptor instead.
func (GetReportsReq_SortedBy) EnumDescriptor() ([]byte, []int) {
	return file_rtuitlab_itlab_reports_v1_reports_proto_rawDescGZIP(), []int{4, 0}
}

type GetReportsPaginatedReq_ApprovedState int32

const (
	GetReportsPaginatedReq_ALL          GetReportsPaginatedReq_ApprovedState = 0
	GetReportsPaginatedReq_APPROVED     GetReportsPaginatedReq_ApprovedState = 1
	GetReportsPaginatedReq_NOT_APPROVED GetReportsPaginatedReq_ApprovedState = 2
)

// Enum value maps for GetReportsPaginatedReq_ApprovedState.
var (
	GetReportsPaginatedReq_ApprovedState_name = map[int32]string{
		0: "ALL",
		1: "APPROVED",
		2: "NOT_APPROVED",
	}
	GetReportsPaginatedReq_ApprovedState_value = map[string]int32{
		"ALL":          0,
		"APPROVED":     1,
		"NOT_APPROVED": 2,
	}
)

func (x GetReportsPaginatedReq_ApprovedState) Enum() *GetReportsPaginatedReq_ApprovedState {
	p := new(GetReportsPaginatedReq_ApprovedState)
	*p = x
	return p
}

func (x GetReportsPaginatedReq_ApprovedState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetReportsPaginatedReq_ApprovedState) Descriptor() protoreflect.EnumDescriptor {
	return file_rtuitlab_itlab_reports_v1_reports_proto_enumTypes[2].Descriptor()
}

func (GetReportsPaginatedReq_ApprovedState) Type() protoreflect.EnumType {
	return &file_rtuitlab_itlab_reports_v1_reports_proto_enumTypes[2]
}

func (x GetReportsPaginatedReq_ApprovedState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetReportsPaginatedReq_ApprovedState.Descriptor instead.
func (GetReportsPaginatedReq_ApprovedState) EnumDescriptor() ([]byte, []int) {
	return file_rtuitlab_itlab_reports_v1_reports_proto_rawDescGZIP(), []int{6, 0}
}

type GetReportImplementerReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReportId string `protobuf:"bytes,1,opt,name=report_id,json=reportId,proto3" json:"report_id,omitempty"`
}

func (x *GetReportImplementerReq) Reset() {
	*x = GetReportImplementerReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtuitlab_itlab_reports_v1_reports_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReportImplementerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReportImplementerReq) ProtoMessage() {}

func (x *GetReportImplementerReq) ProtoReflect() protoreflect.Message {
	mi := &file_rtuitlab_itlab_reports_v1_reports_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReportImplementerReq.ProtoReflect.Descriptor instead.
func (*GetReportImplementerReq) Descriptor() ([]byte, []int) {
	return file_rtuitlab_itlab_reports_v1_reports_proto_rawDescGZIP(), []int{0}
}

func (x *GetReportImplementerReq) GetReportId() string {
	if x != nil {
		return x.ReportId
	}
	return ""
}

type GetReportImplementerResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Result:
	//	*GetReportImplementerResp_Implementer
	//	*GetReportImplementerResp_Error
	Result isGetReportImplementerResp_Result `protobuf_oneof:"result"`
}

func (x *GetReportImplementerResp) Reset() {
	*x = GetReportImplementerResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtuitlab_itlab_reports_v1_reports_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReportImplementerResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReportImplementerResp) ProtoMessage() {}

func (x *GetReportImplementerResp) ProtoReflect() protoreflect.Message {
	mi := &file_rtuitlab_itlab_reports_v1_reports_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReportImplementerResp.ProtoReflect.Descriptor instead.
func (*GetReportImplementerResp) Descriptor() ([]byte, []int) {
	return file_rtuitlab_itlab_reports_v1_reports_proto_rawDescGZIP(), []int{1}
}

func (m *GetReportImplementerResp) GetResult() isGetReportImplementerResp_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (x *GetReportImplementerResp) GetImplementer() string {
	if x, ok := x.GetResult().(*GetReportImplementerResp_Implementer); ok {
		return x.Implementer
	}
	return ""
}

func (x *GetReportImplementerResp) GetError() ReportsServiceErrors {
	if x, ok := x.GetResult().(*GetReportImplementerResp_Error); ok {
		return x.Error
	}
	return ReportsServiceErrors_REPORT_NOT_FOUND
}

type isGetReportImplementerResp_Result interface {
	isGetReportImplementerResp_Result()
}

type GetReportImplementerResp_Implementer struct {
	Implementer string `protobuf:"bytes,1,opt,name=implementer,proto3,oneof"`
}

type GetReportImplementerResp_Error struct {
	Error ReportsServiceErrors `protobuf:"varint,2,opt,name=error,proto3,enum=rtuitlab.itlab.reports.v1.ReportsServiceErrors,oneof"`
}

func (*GetReportImplementerResp_Implementer) isGetReportImplementerResp_Result() {}

func (*GetReportImplementerResp_Error) isGetReportImplementerResp_Result() {}

type GetReportReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReportId string `protobuf:"bytes,1,opt,name=report_id,json=reportId,proto3" json:"report_id,omitempty"`
}

func (x *GetReportReq) Reset() {
	*x = GetReportReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtuitlab_itlab_reports_v1_reports_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReportReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReportReq) ProtoMessage() {}

func (x *GetReportReq) ProtoReflect() protoreflect.Message {
	mi := &file_rtuitlab_itlab_reports_v1_reports_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReportReq.ProtoReflect.Descriptor instead.
func (*GetReportReq) Descriptor() ([]byte, []int) {
	return file_rtuitlab_itlab_reports_v1_reports_proto_rawDescGZIP(), []int{2}
}

func (x *GetReportReq) GetReportId() string {
	if x != nil {
		return x.ReportId
	}
	return ""
}

type GetReportResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Result:
	//	*GetReportResp_Report
	//	*GetReportResp_Error
	Result isGetReportResp_Result `protobuf_oneof:"result"`
}

func (x *GetReportResp) Reset() {
	*x = GetReportResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtuitlab_itlab_reports_v1_reports_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReportResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReportResp) ProtoMessage() {}

func (x *GetReportResp) ProtoReflect() protoreflect.Message {
	mi := &file_rtuitlab_itlab_reports_v1_reports_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReportResp.ProtoReflect.Descriptor instead.
func (*GetReportResp) Descriptor() ([]byte, []int) {
	return file_rtuitlab_itlab_reports_v1_reports_proto_rawDescGZIP(), []int{3}
}

func (m *GetReportResp) GetResult() isGetReportResp_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (x *GetReportResp) GetReport() *types.Report {
	if x, ok := x.GetResult().(*GetReportResp_Report); ok {
		return x.Report
	}
	return nil
}

func (x *GetReportResp) GetError() ReportsServiceErrors {
	if x, ok := x.GetResult().(*GetReportResp_Error); ok {
		return x.Error
	}
	return ReportsServiceErrors_REPORT_NOT_FOUND
}

type isGetReportResp_Result interface {
	isGetReportResp_Result()
}

type GetReportResp_Report struct {
	Report *types.Report `protobuf:"bytes,1,opt,name=report,proto3,oneof"`
}

type GetReportResp_Error struct {
	Error ReportsServiceErrors `protobuf:"varint,2,opt,name=error,proto3,enum=rtuitlab.itlab.reports.v1.ReportsServiceErrors,oneof"`
}

func (*GetReportResp_Report) isGetReportResp_Result() {}

func (*GetReportResp_Error) isGetReportResp_Result() {}

type GetReportsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Default sorting is by name
	SortedBy *GetReportsReq_SortedBy `protobuf:"varint,1,opt,name=sorted_by,json=sortedBy,proto3,enum=rtuitlab.itlab.reports.v1.GetReportsReq_SortedBy,oneof" json:"sorted_by,omitempty"`
}

func (x *GetReportsReq) Reset() {
	*x = GetReportsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtuitlab_itlab_reports_v1_reports_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReportsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReportsReq) ProtoMessage() {}

func (x *GetReportsReq) ProtoReflect() protoreflect.Message {
	mi := &file_rtuitlab_itlab_reports_v1_reports_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReportsReq.ProtoReflect.Descriptor instead.
func (*GetReportsReq) Descriptor() ([]byte, []int) {
	return file_rtuitlab_itlab_reports_v1_reports_proto_rawDescGZIP(), []int{4}
}

func (x *GetReportsReq) GetSortedBy() GetReportsReq_SortedBy {
	if x != nil && x.SortedBy != nil {
		return *x.SortedBy
	}
	return GetReportsReq_NAME
}

type GetReportsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reports []*types.Report `protobuf:"bytes,1,rep,name=reports,proto3" json:"reports,omitempty"`
}

func (x *GetReportsResp) Reset() {
	*x = GetReportsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtuitlab_itlab_reports_v1_reports_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReportsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReportsResp) ProtoMessage() {}

func (x *GetReportsResp) ProtoReflect() protoreflect.Message {
	mi := &file_rtuitlab_itlab_reports_v1_reports_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReportsResp.ProtoReflect.Descriptor instead.
func (*GetReportsResp) Descriptor() ([]byte, []int) {
	return file_rtuitlab_itlab_reports_v1_reports_proto_rawDescGZIP(), []int{5}
}

func (x *GetReportsResp) GetReports() []*types.Report {
	if x != nil {
		return x.Reports
	}
	return nil
}

type GetReportsPaginatedReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Default offset is 0
	Offset      *int32                              `protobuf:"varint,1,opt,name=offset,proto3,oneof" json:"offset,omitempty"`
	Limit       *int32                              `protobuf:"varint,2,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
	DateBegin   *timestamppb.Timestamp              `protobuf:"bytes,3,opt,name=date_begin,json=dateBegin,proto3,oneof" json:"date_begin,omitempty"`
	DateEnd     *timestamppb.Timestamp              `protobuf:"bytes,4,opt,name=date_end,json=dateEnd,proto3,oneof" json:"date_end,omitempty"`
	MatchParams *GetReportsPaginatedReq_MatchParams `protobuf:"bytes,5,opt,name=match_params,json=matchParams,proto3,oneof" json:"match_params,omitempty"`
	// Default state is ALL
	ApprovedState *GetReportsPaginatedReq_ApprovedState `protobuf:"varint,6,opt,name=approved_state,json=approvedState,proto3,enum=rtuitlab.itlab.reports.v1.GetReportsPaginatedReq_ApprovedState,oneof" json:"approved_state,omitempty"`
	SortParams    *GetReportsPaginatedReq_SortParams    `protobuf:"bytes,7,opt,name=sort_params,json=sortParams,proto3,oneof" json:"sort_params,omitempty"`
}

func (x *GetReportsPaginatedReq) Reset() {
	*x = GetReportsPaginatedReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtuitlab_itlab_reports_v1_reports_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReportsPaginatedReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReportsPaginatedReq) ProtoMessage() {}

func (x *GetReportsPaginatedReq) ProtoReflect() protoreflect.Message {
	mi := &file_rtuitlab_itlab_reports_v1_reports_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReportsPaginatedReq.ProtoReflect.Descriptor instead.
func (*GetReportsPaginatedReq) Descriptor() ([]byte, []int) {
	return file_rtuitlab_itlab_reports_v1_reports_proto_rawDescGZIP(), []int{6}
}

func (x *GetReportsPaginatedReq) GetOffset() int32 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

func (x *GetReportsPaginatedReq) GetLimit() int32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *GetReportsPaginatedReq) GetDateBegin() *timestamppb.Timestamp {
	if x != nil {
		return x.DateBegin
	}
	return nil
}

func (x *GetReportsPaginatedReq) GetDateEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.DateEnd
	}
	return nil
}

func (x *GetReportsPaginatedReq) GetMatchParams() *GetReportsPaginatedReq_MatchParams {
	if x != nil {
		return x.MatchParams
	}
	return nil
}

func (x *GetReportsPaginatedReq) GetApprovedState() GetReportsPaginatedReq_ApprovedState {
	if x != nil && x.ApprovedState != nil {
		return *x.ApprovedState
	}
	return GetReportsPaginatedReq_ALL
}

func (x *GetReportsPaginatedReq) GetSortParams() *GetReportsPaginatedReq_SortParams {
	if x != nil {
		return x.SortParams
	}
	return nil
}

type GetReportsPaginatedResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// current count of reports
	Count   int32           `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Reports []*types.Report `protobuf:"bytes,2,rep,name=reports,proto3" json:"reports,omitempty"`
	// indicates if there are more reports
	HasMore bool  `protobuf:"varint,3,opt,name=has_more,json=hasMore,proto3" json:"has_more,omitempty"`
	Limit   int32 `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset  int32 `protobuf:"varint,5,opt,name=offset,proto3" json:"offset,omitempty"`
	// the count of all reports that match the request
	TotalResult int32 `protobuf:"varint,6,opt,name=total_result,json=totalResult,proto3" json:"total_result,omitempty"`
}

func (x *GetReportsPaginatedResp) Reset() {
	*x = GetReportsPaginatedResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtuitlab_itlab_reports_v1_reports_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReportsPaginatedResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReportsPaginatedResp) ProtoMessage() {}

func (x *GetReportsPaginatedResp) ProtoReflect() protoreflect.Message {
	mi := &file_rtuitlab_itlab_reports_v1_reports_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReportsPaginatedResp.ProtoReflect.Descriptor instead.
func (*GetReportsPaginatedResp) Descriptor() ([]byte, []int) {
	return file_rtuitlab_itlab_reports_v1_reports_proto_rawDescGZIP(), []int{7}
}

func (x *GetReportsPaginatedResp) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *GetReportsPaginatedResp) GetReports() []*types.Report {
	if x != nil {
		return x.Reports
	}
	return nil
}

func (x *GetReportsPaginatedResp) GetHasMore() bool {
	if x != nil {
		return x.HasMore
	}
	return false
}

func (x *GetReportsPaginatedResp) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetReportsPaginatedResp) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetReportsPaginatedResp) GetTotalResult() int32 {
	if x != nil {
		return x.TotalResult
	}
	return 0
}

type GetReportsPaginatedReq_MatchParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        *string                `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Implementer *string                `protobuf:"bytes,2,opt,name=implementer,proto3,oneof" json:"implementer,omitempty"`
	Reporter    *string                `protobuf:"bytes,3,opt,name=reporter,proto3,oneof" json:"reporter,omitempty"`
	Date        *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=date,proto3,oneof" json:"date,omitempty"`
}

func (x *GetReportsPaginatedReq_MatchParams) Reset() {
	*x = GetReportsPaginatedReq_MatchParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtuitlab_itlab_reports_v1_reports_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReportsPaginatedReq_MatchParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReportsPaginatedReq_MatchParams) ProtoMessage() {}

func (x *GetReportsPaginatedReq_MatchParams) ProtoReflect() protoreflect.Message {
	mi := &file_rtuitlab_itlab_reports_v1_reports_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReportsPaginatedReq_MatchParams.ProtoReflect.Descriptor instead.
func (*GetReportsPaginatedReq_MatchParams) Descriptor() ([]byte, []int) {
	return file_rtuitlab_itlab_reports_v1_reports_proto_rawDescGZIP(), []int{6, 0}
}

func (x *GetReportsPaginatedReq_MatchParams) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *GetReportsPaginatedReq_MatchParams) GetImplementer() string {
	if x != nil && x.Implementer != nil {
		return *x.Implementer
	}
	return ""
}

func (x *GetReportsPaginatedReq_MatchParams) GetReporter() string {
	if x != nil && x.Reporter != nil {
		return *x.Reporter
	}
	return ""
}

func (x *GetReportsPaginatedReq_MatchParams) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

type GetReportsPaginatedReq_SortParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date *shared.Ordering `protobuf:"varint,1,opt,name=date,proto3,enum=rtuitlab.itlab.shared.Ordering,oneof" json:"date,omitempty"`
	Name *shared.Ordering `protobuf:"varint,2,opt,name=name,proto3,enum=rtuitlab.itlab.shared.Ordering,oneof" json:"name,omitempty"`
}

func (x *GetReportsPaginatedReq_SortParams) Reset() {
	*x = GetReportsPaginatedReq_SortParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtuitlab_itlab_reports_v1_reports_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReportsPaginatedReq_SortParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReportsPaginatedReq_SortParams) ProtoMessage() {}

func (x *GetReportsPaginatedReq_SortParams) ProtoReflect() protoreflect.Message {
	mi := &file_rtuitlab_itlab_reports_v1_reports_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReportsPaginatedReq_SortParams.ProtoReflect.Descriptor instead.
func (*GetReportsPaginatedReq_SortParams) Descriptor() ([]byte, []int) {
	return file_rtuitlab_itlab_reports_v1_reports_proto_rawDescGZIP(), []int{6, 1}
}

func (x *GetReportsPaginatedReq_SortParams) GetDate() shared.Ordering {
	if x != nil && x.Date != nil {
		return *x.Date
	}
	return shared.Ordering_ASCENDING
}

func (x *GetReportsPaginatedReq_SortParams) GetName() shared.Ordering {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return shared.Ordering_ASCENDING
}

var File_rtuitlab_itlab_reports_v1_reports_proto protoreflect.FileDescriptor

var file_rtuitlab_itlab_reports_v1_reports_proto_rawDesc = []byte{
	0x0a, 0x27, 0x72, 0x74, 0x75, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2f, 0x69, 0x74, 0x6c, 0x61, 0x62,
	0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x72, 0x74, 0x75, 0x69, 0x74,
	0x6c, 0x61, 0x62, 0x2e, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x1a, 0x22, 0x72, 0x74, 0x75, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2f, 0x69,
	0x74, 0x6c, 0x61, 0x62, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x72, 0x74, 0x75, 0x69, 0x74,
	0x6c, 0x61, 0x62, 0x2f, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x36, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6d, 0x70, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x22, 0x91, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x0b, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x72, 0x74, 0x75, 0x69, 0x74, 0x6c,
	0x61, 0x62, 0x2e, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x2b, 0x0a, 0x0c, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1b, 0x0a, 0x09, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x22, 0x9c, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x38, 0x0a, 0x06, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x74, 0x75,
	0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x47, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x72, 0x74, 0x75, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x69,
	0x74, 0x6c, 0x61, 0x62, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x08, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x92, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x12, 0x53, 0x0a, 0x09, 0x73, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x72,
	0x74, 0x75, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x42, 0x79, 0x48,
	0x00, 0x52, 0x08, 0x73, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x42, 0x79, 0x88, 0x01, 0x01, 0x22, 0x1e,
	0x0a, 0x08, 0x53, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x41,
	0x4d, 0x45, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x41, 0x54, 0x45, 0x10, 0x01, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x22, 0x4a, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x38,
	0x0a, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x72, 0x74, 0x75, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x69, 0x74, 0x6c, 0x61, 0x62,
	0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x07, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x22, 0x8d, 0x08, 0x0a, 0x16, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64,
	0x52, 0x65, 0x71, 0x12, 0x1b, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x19, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x01, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x0a, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x02, 0x52, 0x09, 0x64,
	0x61, 0x74, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x08, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x03, 0x52, 0x07, 0x64, 0x61, 0x74,
	0x65, 0x45, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x65, 0x0a, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e,
	0x72, 0x74, 0x75, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71,
	0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x48, 0x04, 0x52, 0x0b,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x88, 0x01, 0x01, 0x12, 0x6b,
	0x0a, 0x0e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x72, 0x74, 0x75, 0x69, 0x74, 0x6c, 0x61,
	0x62, 0x2e, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x05, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x62, 0x0a, 0x0b, 0x73,
	0x6f, 0x72, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3c, 0x2e, 0x72, 0x74, 0x75, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x69, 0x74, 0x6c, 0x61,
	0x62, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64,
	0x52, 0x65, 0x71, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x48, 0x06,
	0x52, 0x0a, 0x73, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x88, 0x01, 0x01, 0x1a,
	0xd2, 0x01, 0x0a, 0x0b, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12,
	0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x0b, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x1f, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x02, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01,
	0x12, 0x33, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x03, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x65, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x1a, 0x92, 0x01, 0x0a, 0x0a, 0x53, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x38, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1f, 0x2e, 0x72, 0x74, 0x75, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x69, 0x74, 0x6c,
	0x61, 0x62, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x69,
	0x6e, 0x67, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x72, 0x74,
	0x75, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x01, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x38, 0x0a, 0x0d, 0x41, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c,
	0x4c, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45,
	0x44, 0x10, 0x02, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x65, 0x6e, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x6f, 0x72,
	0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0xd5, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x07, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x74,
	0x75, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x07, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x5f, 0x6d, 0x6f, 0x72, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x61, 0x73, 0x4d, 0x6f, 0x72, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x2a, 0x2c, 0x0a, 0x14, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x45, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x00, 0x32, 0xcb,
	0x03, 0x0a, 0x07, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x7f, 0x0a, 0x14, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x12, 0x32, 0x2e, 0x72, 0x74, 0x75, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x69, 0x74,
	0x6c, 0x61, 0x62, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x33, 0x2e, 0x72, 0x74, 0x75, 0x69, 0x74, 0x6c, 0x61,
	0x62, 0x2e, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6d, 0x70, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5e, 0x0a, 0x09, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x27, 0x2e, 0x72, 0x74, 0x75, 0x69, 0x74,
	0x6c, 0x61, 0x62, 0x2e, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x1a, 0x28, 0x2e, 0x72, 0x74, 0x75, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x69, 0x74, 0x6c,
	0x61, 0x62, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x61, 0x0a, 0x0a, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x28, 0x2e, 0x72, 0x74, 0x75, 0x69,
	0x74, 0x6c, 0x61, 0x62, 0x2e, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x72, 0x74, 0x75, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x69,
	0x74, 0x6c, 0x61, 0x62, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x7c,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x64, 0x12, 0x31, 0x2e, 0x72, 0x74, 0x75, 0x69, 0x74, 0x6c, 0x61, 0x62,
	0x2e, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x32, 0x2e, 0x72, 0x74, 0x75, 0x69, 0x74,
	0x6c, 0x61, 0x62, 0x2e, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x42, 0x69, 0x5a, 0x3c,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x52, 0x54, 0x55, 0x49, 0x54,
	0x4c, 0x61, 0x62, 0x2f, 0x49, 0x54, 0x4c, 0x61, 0x62, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x3b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0xaa, 0x02, 0x28, 0x52,
	0x54, 0x55, 0x49, 0x54, 0x4c, 0x61, 0x62, 0x2e, 0x49, 0x54, 0x4c, 0x61, 0x62, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x56, 0x31, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rtuitlab_itlab_reports_v1_reports_proto_rawDescOnce sync.Once
	file_rtuitlab_itlab_reports_v1_reports_proto_rawDescData = file_rtuitlab_itlab_reports_v1_reports_proto_rawDesc
)

func file_rtuitlab_itlab_reports_v1_reports_proto_rawDescGZIP() []byte {
	file_rtuitlab_itlab_reports_v1_reports_proto_rawDescOnce.Do(func() {
		file_rtuitlab_itlab_reports_v1_reports_proto_rawDescData = protoimpl.X.CompressGZIP(file_rtuitlab_itlab_reports_v1_reports_proto_rawDescData)
	})
	return file_rtuitlab_itlab_reports_v1_reports_proto_rawDescData
}

var file_rtuitlab_itlab_reports_v1_reports_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_rtuitlab_itlab_reports_v1_reports_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_rtuitlab_itlab_reports_v1_reports_proto_goTypes = []interface{}{
	(ReportsServiceErrors)(0),                  // 0: rtuitlab.itlab.reports.v1.ReportsServiceErrors
	(GetReportsReq_SortedBy)(0),                // 1: rtuitlab.itlab.reports.v1.GetReportsReq.SortedBy
	(GetReportsPaginatedReq_ApprovedState)(0),  // 2: rtuitlab.itlab.reports.v1.GetReportsPaginatedReq.ApprovedState
	(*GetReportImplementerReq)(nil),            // 3: rtuitlab.itlab.reports.v1.GetReportImplementerReq
	(*GetReportImplementerResp)(nil),           // 4: rtuitlab.itlab.reports.v1.GetReportImplementerResp
	(*GetReportReq)(nil),                       // 5: rtuitlab.itlab.reports.v1.GetReportReq
	(*GetReportResp)(nil),                      // 6: rtuitlab.itlab.reports.v1.GetReportResp
	(*GetReportsReq)(nil),                      // 7: rtuitlab.itlab.reports.v1.GetReportsReq
	(*GetReportsResp)(nil),                     // 8: rtuitlab.itlab.reports.v1.GetReportsResp
	(*GetReportsPaginatedReq)(nil),             // 9: rtuitlab.itlab.reports.v1.GetReportsPaginatedReq
	(*GetReportsPaginatedResp)(nil),            // 10: rtuitlab.itlab.reports.v1.GetReportsPaginatedResp
	(*GetReportsPaginatedReq_MatchParams)(nil), // 11: rtuitlab.itlab.reports.v1.GetReportsPaginatedReq.MatchParams
	(*GetReportsPaginatedReq_SortParams)(nil),  // 12: rtuitlab.itlab.reports.v1.GetReportsPaginatedReq.SortParams
	(*types.Report)(nil),                       // 13: rtuitlab.itlab.reports.Report
	(*timestamppb.Timestamp)(nil),              // 14: google.protobuf.Timestamp
	(shared.Ordering)(0),                       // 15: rtuitlab.itlab.shared.Ordering
}
var file_rtuitlab_itlab_reports_v1_reports_proto_depIdxs = []int32{
	0,  // 0: rtuitlab.itlab.reports.v1.GetReportImplementerResp.error:type_name -> rtuitlab.itlab.reports.v1.ReportsServiceErrors
	13, // 1: rtuitlab.itlab.reports.v1.GetReportResp.report:type_name -> rtuitlab.itlab.reports.Report
	0,  // 2: rtuitlab.itlab.reports.v1.GetReportResp.error:type_name -> rtuitlab.itlab.reports.v1.ReportsServiceErrors
	1,  // 3: rtuitlab.itlab.reports.v1.GetReportsReq.sorted_by:type_name -> rtuitlab.itlab.reports.v1.GetReportsReq.SortedBy
	13, // 4: rtuitlab.itlab.reports.v1.GetReportsResp.reports:type_name -> rtuitlab.itlab.reports.Report
	14, // 5: rtuitlab.itlab.reports.v1.GetReportsPaginatedReq.date_begin:type_name -> google.protobuf.Timestamp
	14, // 6: rtuitlab.itlab.reports.v1.GetReportsPaginatedReq.date_end:type_name -> google.protobuf.Timestamp
	11, // 7: rtuitlab.itlab.reports.v1.GetReportsPaginatedReq.match_params:type_name -> rtuitlab.itlab.reports.v1.GetReportsPaginatedReq.MatchParams
	2,  // 8: rtuitlab.itlab.reports.v1.GetReportsPaginatedReq.approved_state:type_name -> rtuitlab.itlab.reports.v1.GetReportsPaginatedReq.ApprovedState
	12, // 9: rtuitlab.itlab.reports.v1.GetReportsPaginatedReq.sort_params:type_name -> rtuitlab.itlab.reports.v1.GetReportsPaginatedReq.SortParams
	13, // 10: rtuitlab.itlab.reports.v1.GetReportsPaginatedResp.reports:type_name -> rtuitlab.itlab.reports.Report
	14, // 11: rtuitlab.itlab.reports.v1.GetReportsPaginatedReq.MatchParams.date:type_name -> google.protobuf.Timestamp
	15, // 12: rtuitlab.itlab.reports.v1.GetReportsPaginatedReq.SortParams.date:type_name -> rtuitlab.itlab.shared.Ordering
	15, // 13: rtuitlab.itlab.reports.v1.GetReportsPaginatedReq.SortParams.name:type_name -> rtuitlab.itlab.shared.Ordering
	3,  // 14: rtuitlab.itlab.reports.v1.Reports.GetReportImplementer:input_type -> rtuitlab.itlab.reports.v1.GetReportImplementerReq
	5,  // 15: rtuitlab.itlab.reports.v1.Reports.GetReport:input_type -> rtuitlab.itlab.reports.v1.GetReportReq
	7,  // 16: rtuitlab.itlab.reports.v1.Reports.GetReports:input_type -> rtuitlab.itlab.reports.v1.GetReportsReq
	9,  // 17: rtuitlab.itlab.reports.v1.Reports.GetReportsPaginated:input_type -> rtuitlab.itlab.reports.v1.GetReportsPaginatedReq
	4,  // 18: rtuitlab.itlab.reports.v1.Reports.GetReportImplementer:output_type -> rtuitlab.itlab.reports.v1.GetReportImplementerResp
	6,  // 19: rtuitlab.itlab.reports.v1.Reports.GetReport:output_type -> rtuitlab.itlab.reports.v1.GetReportResp
	8,  // 20: rtuitlab.itlab.reports.v1.Reports.GetReports:output_type -> rtuitlab.itlab.reports.v1.GetReportsResp
	10, // 21: rtuitlab.itlab.reports.v1.Reports.GetReportsPaginated:output_type -> rtuitlab.itlab.reports.v1.GetReportsPaginatedResp
	18, // [18:22] is the sub-list for method output_type
	14, // [14:18] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_rtuitlab_itlab_reports_v1_reports_proto_init() }
func file_rtuitlab_itlab_reports_v1_reports_proto_init() {
	if File_rtuitlab_itlab_reports_v1_reports_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rtuitlab_itlab_reports_v1_reports_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReportImplementerReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtuitlab_itlab_reports_v1_reports_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReportImplementerResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtuitlab_itlab_reports_v1_reports_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReportReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtuitlab_itlab_reports_v1_reports_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReportResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtuitlab_itlab_reports_v1_reports_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReportsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtuitlab_itlab_reports_v1_reports_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReportsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtuitlab_itlab_reports_v1_reports_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReportsPaginatedReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtuitlab_itlab_reports_v1_reports_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReportsPaginatedResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtuitlab_itlab_reports_v1_reports_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReportsPaginatedReq_MatchParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtuitlab_itlab_reports_v1_reports_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReportsPaginatedReq_SortParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_rtuitlab_itlab_reports_v1_reports_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*GetReportImplementerResp_Implementer)(nil),
		(*GetReportImplementerResp_Error)(nil),
	}
	file_rtuitlab_itlab_reports_v1_reports_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*GetReportResp_Report)(nil),
		(*GetReportResp_Error)(nil),
	}
	file_rtuitlab_itlab_reports_v1_reports_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_rtuitlab_itlab_reports_v1_reports_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_rtuitlab_itlab_reports_v1_reports_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_rtuitlab_itlab_reports_v1_reports_proto_msgTypes[9].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rtuitlab_itlab_reports_v1_reports_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_rtuitlab_itlab_reports_v1_reports_proto_goTypes,
		DependencyIndexes: file_rtuitlab_itlab_reports_v1_reports_proto_depIdxs,
		EnumInfos:         file_rtuitlab_itlab_reports_v1_reports_proto_enumTypes,
		MessageInfos:      file_rtuitlab_itlab_reports_v1_reports_proto_msgTypes,
	}.Build()
	File_rtuitlab_itlab_reports_v1_reports_proto = out.File
	file_rtuitlab_itlab_reports_v1_reports_proto_rawDesc = nil
	file_rtuitlab_itlab_reports_v1_reports_proto_goTypes = nil
	file_rtuitlab_itlab_reports_v1_reports_proto_depIdxs = nil
}
