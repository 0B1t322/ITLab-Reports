// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: rtuitlab/itlab/reports/v1/reports.proto

package services

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ReportsClient is the client API for Reports service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReportsClient interface {
	// Return report implementer by id
	// If report not found return REPORT_NOT_FOUND error
	GetReportImplementer(ctx context.Context, in *GetReportImplementerReq, opts ...grpc.CallOption) (*GetReportImplementerResp, error)
	// Return report by id
	// If report not found return REPORT_NOT_FOUND error
	GetReport(ctx context.Context, in *GetReportReq, opts ...grpc.CallOption) (*GetReportResp, error)
	// Return reports list without pagaination
	GetReports(ctx context.Context, in *GetReportsReq, opts ...grpc.CallOption) (*GetReportsResp, error)
	// Return reports list with pagaination
	GetReportsPaginated(ctx context.Context, in *GetReportsPaginatedReq, opts ...grpc.CallOption) (*GetReportsPaginatedResp, error)
	// Set report as paid
	// Is report not found return REPORT_NOT_FOUND error
	// Is report already paid return REPORT_ALREADY_PAID error
	PaidForReport(ctx context.Context, in *PaidForReportReq, opts ...grpc.CallOption) (*PaidForReportResp, error)
}

type reportsClient struct {
	cc grpc.ClientConnInterface
}

func NewReportsClient(cc grpc.ClientConnInterface) ReportsClient {
	return &reportsClient{cc}
}

func (c *reportsClient) GetReportImplementer(ctx context.Context, in *GetReportImplementerReq, opts ...grpc.CallOption) (*GetReportImplementerResp, error) {
	out := new(GetReportImplementerResp)
	err := c.cc.Invoke(ctx, "/rtuitlab.itlab.reports.v1.Reports/GetReportImplementer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportsClient) GetReport(ctx context.Context, in *GetReportReq, opts ...grpc.CallOption) (*GetReportResp, error) {
	out := new(GetReportResp)
	err := c.cc.Invoke(ctx, "/rtuitlab.itlab.reports.v1.Reports/GetReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportsClient) GetReports(ctx context.Context, in *GetReportsReq, opts ...grpc.CallOption) (*GetReportsResp, error) {
	out := new(GetReportsResp)
	err := c.cc.Invoke(ctx, "/rtuitlab.itlab.reports.v1.Reports/GetReports", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportsClient) GetReportsPaginated(ctx context.Context, in *GetReportsPaginatedReq, opts ...grpc.CallOption) (*GetReportsPaginatedResp, error) {
	out := new(GetReportsPaginatedResp)
	err := c.cc.Invoke(ctx, "/rtuitlab.itlab.reports.v1.Reports/GetReportsPaginated", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportsClient) PaidForReport(ctx context.Context, in *PaidForReportReq, opts ...grpc.CallOption) (*PaidForReportResp, error) {
	out := new(PaidForReportResp)
	err := c.cc.Invoke(ctx, "/rtuitlab.itlab.reports.v1.Reports/PaidForReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReportsServer is the server API for Reports service.
// All implementations must embed UnimplementedReportsServer
// for forward compatibility
type ReportsServer interface {
	// Return report implementer by id
	// If report not found return REPORT_NOT_FOUND error
	GetReportImplementer(context.Context, *GetReportImplementerReq) (*GetReportImplementerResp, error)
	// Return report by id
	// If report not found return REPORT_NOT_FOUND error
	GetReport(context.Context, *GetReportReq) (*GetReportResp, error)
	// Return reports list without pagaination
	GetReports(context.Context, *GetReportsReq) (*GetReportsResp, error)
	// Return reports list with pagaination
	GetReportsPaginated(context.Context, *GetReportsPaginatedReq) (*GetReportsPaginatedResp, error)
	// Set report as paid
	// Is report not found return REPORT_NOT_FOUND error
	// Is report already paid return REPORT_ALREADY_PAID error
	PaidForReport(context.Context, *PaidForReportReq) (*PaidForReportResp, error)
	mustEmbedUnimplementedReportsServer()
}

// UnimplementedReportsServer must be embedded to have forward compatible implementations.
type UnimplementedReportsServer struct {
}

func (UnimplementedReportsServer) GetReportImplementer(context.Context, *GetReportImplementerReq) (*GetReportImplementerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReportImplementer not implemented")
}
func (UnimplementedReportsServer) GetReport(context.Context, *GetReportReq) (*GetReportResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReport not implemented")
}
func (UnimplementedReportsServer) GetReports(context.Context, *GetReportsReq) (*GetReportsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReports not implemented")
}
func (UnimplementedReportsServer) GetReportsPaginated(context.Context, *GetReportsPaginatedReq) (*GetReportsPaginatedResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReportsPaginated not implemented")
}
func (UnimplementedReportsServer) PaidForReport(context.Context, *PaidForReportReq) (*PaidForReportResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaidForReport not implemented")
}
func (UnimplementedReportsServer) mustEmbedUnimplementedReportsServer() {}

// UnsafeReportsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReportsServer will
// result in compilation errors.
type UnsafeReportsServer interface {
	mustEmbedUnimplementedReportsServer()
}

func RegisterReportsServer(s grpc.ServiceRegistrar, srv ReportsServer) {
	s.RegisterService(&Reports_ServiceDesc, srv)
}

func _Reports_GetReportImplementer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReportImplementerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportsServer).GetReportImplementer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rtuitlab.itlab.reports.v1.Reports/GetReportImplementer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportsServer).GetReportImplementer(ctx, req.(*GetReportImplementerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reports_GetReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReportReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportsServer).GetReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rtuitlab.itlab.reports.v1.Reports/GetReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportsServer).GetReport(ctx, req.(*GetReportReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reports_GetReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReportsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportsServer).GetReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rtuitlab.itlab.reports.v1.Reports/GetReports",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportsServer).GetReports(ctx, req.(*GetReportsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reports_GetReportsPaginated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReportsPaginatedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportsServer).GetReportsPaginated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rtuitlab.itlab.reports.v1.Reports/GetReportsPaginated",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportsServer).GetReportsPaginated(ctx, req.(*GetReportsPaginatedReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reports_PaidForReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaidForReportReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportsServer).PaidForReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rtuitlab.itlab.reports.v1.Reports/PaidForReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportsServer).PaidForReport(ctx, req.(*PaidForReportReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Reports_ServiceDesc is the grpc.ServiceDesc for Reports service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Reports_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rtuitlab.itlab.reports.v1.Reports",
	HandlerType: (*ReportsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetReportImplementer",
			Handler:    _Reports_GetReportImplementer_Handler,
		},
		{
			MethodName: "GetReport",
			Handler:    _Reports_GetReport_Handler,
		},
		{
			MethodName: "GetReports",
			Handler:    _Reports_GetReports_Handler,
		},
		{
			MethodName: "GetReportsPaginated",
			Handler:    _Reports_GetReportsPaginated_Handler,
		},
		{
			MethodName: "PaidForReport",
			Handler:    _Reports_PaidForReport_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rtuitlab/itlab/reports/v1/reports.proto",
}
