// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package services

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ReportsClient is the client API for Reports service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReportsClient interface {
	// Return report implementer by id
	// If report not found return REPORT_NOT_FOUND error
	GetReportImplementer(ctx context.Context, in *GetReportImplementerReq, opts ...grpc.CallOption) (*GetReportImplementerResp, error)
	// Return report by id
	// If report not found return REPORT_NOT_FOUND error
	GetReport(ctx context.Context, in *GetReportReq, opts ...grpc.CallOption) (*GetReportResp, error)
}

type reportsClient struct {
	cc grpc.ClientConnInterface
}

func NewReportsClient(cc grpc.ClientConnInterface) ReportsClient {
	return &reportsClient{cc}
}

func (c *reportsClient) GetReportImplementer(ctx context.Context, in *GetReportImplementerReq, opts ...grpc.CallOption) (*GetReportImplementerResp, error) {
	out := new(GetReportImplementerResp)
	err := c.cc.Invoke(ctx, "/rtuitlab.itlab.reports.v1.Reports/GetReportImplementer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportsClient) GetReport(ctx context.Context, in *GetReportReq, opts ...grpc.CallOption) (*GetReportResp, error) {
	out := new(GetReportResp)
	err := c.cc.Invoke(ctx, "/rtuitlab.itlab.reports.v1.Reports/GetReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReportsServer is the server API for Reports service.
// All implementations must embed UnimplementedReportsServer
// for forward compatibility
type ReportsServer interface {
	// Return report implementer by id
	// If report not found return REPORT_NOT_FOUND error
	GetReportImplementer(context.Context, *GetReportImplementerReq) (*GetReportImplementerResp, error)
	// Return report by id
	// If report not found return REPORT_NOT_FOUND error
	GetReport(context.Context, *GetReportReq) (*GetReportResp, error)
	mustEmbedUnimplementedReportsServer()
}

// UnimplementedReportsServer must be embedded to have forward compatible implementations.
type UnimplementedReportsServer struct {
}

func (UnimplementedReportsServer) GetReportImplementer(context.Context, *GetReportImplementerReq) (*GetReportImplementerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReportImplementer not implemented")
}
func (UnimplementedReportsServer) GetReport(context.Context, *GetReportReq) (*GetReportResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReport not implemented")
}
func (UnimplementedReportsServer) mustEmbedUnimplementedReportsServer() {}

// UnsafeReportsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReportsServer will
// result in compilation errors.
type UnsafeReportsServer interface {
	mustEmbedUnimplementedReportsServer()
}

func RegisterReportsServer(s grpc.ServiceRegistrar, srv ReportsServer) {
	s.RegisterService(&_Reports_serviceDesc, srv)
}

func _Reports_GetReportImplementer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReportImplementerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportsServer).GetReportImplementer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rtuitlab.itlab.reports.v1.Reports/GetReportImplementer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportsServer).GetReportImplementer(ctx, req.(*GetReportImplementerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reports_GetReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReportReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportsServer).GetReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rtuitlab.itlab.reports.v1.Reports/GetReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportsServer).GetReport(ctx, req.(*GetReportReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Reports_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rtuitlab.itlab.reports.v1.Reports",
	HandlerType: (*ReportsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetReportImplementer",
			Handler:    _Reports_GetReportImplementer_Handler,
		},
		{
			MethodName: "GetReport",
			Handler:    _Reports_GetReport_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rtuitlab/itlab/reports/v1/reports.proto",
}
