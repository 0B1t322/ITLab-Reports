// Package docs GENERATED BY SWAG; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/reports": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "# Description \n\n**Return a list of reports**\n\n## If you are admin\nreturn a list of reports of all user\n\n## If you are a user\nreturn a list of your reports\n\n## Params\n### Query\n1. ` + "`" + `sorted_by` + "`" + ` - sort by ` + "`" + `name` + "`" + ` or ` + "`" + `date` + "`" + `. In both sort ascending\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reports"
                ],
                "summary": "get report list",
                "parameters": [
                    {
                        "enum": [
                            "name",
                            "date"
                        ],
                        "type": "string",
                        "description": "sort by this field",
                        "name": "sorted_by",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.GetReportResp"
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "create report\n# Description \n\n**Create a report**\n\nHave ` + "`" + `implementer` + "`" + ` query param that Indicates who the report is about, if not specifed - by default it's you.\n\n` + "`" + `name` + "`" + ` field is optional so you can create report with two ways:\n\n## Creating by only ` + "`" + `` + "`" + `` + "`" + `text` + "`" + `` + "`" + `` + "`" + ` field\n\nTo create by only text field you should to set in text field ` + "`" + `` + "`" + `` + "`" + `name` + "`" + `` + "`" + `` + "`" + ` of report and field ` + "`" + `` + "`" + `` + "`" + `text` + "`" + `` + "`" + `` + "`" + ` and separet it with ` + "`" + `` + "`" + `` + "`" + `@\\n\\t\\n@` + "`" + `` + "`" + `` + "`" + `\nFor example next body will create report with ` + "`" + `` + "`" + `` + "`" + `name` + "`" + `` + "`" + `` + "`" + ` report_text and with ` + "`" + `` + "`" + `` + "`" + `text` + "`" + `` + "`" + `` + "`" + ` report text\n` + "`" + `` + "`" + `` + "`" + `json\n{\n    \"text\": \"report_text@\\n\\t\\n@report_text\"\n}\n` + "`" + `` + "`" + `` + "`" + `\n\n## Creating by ` + "`" + `` + "`" + `` + "`" + `text` + "`" + `` + "`" + `` + "`" + ` and ` + "`" + `` + "`" + `` + "`" + `name` + "`" + `` + "`" + `` + "`" + ` fields\n\nIt's more **preferred** method just send next body:\n` + "`" + `` + "`" + `` + "`" + `json\n{\n    \"name\": \"report_name\",\n    \"text\": \"report_text\"\n}\n` + "`" + `` + "`" + `` + "`" + `\n\n# Errors\n\n## 400 Bad request\n1. If ` + "`" + `name` + "`" + ` and ` + "`" + `text` + "`" + ` fields is empty\n2. If ` + "`" + `name` + "`" + ` is not empty, ` + "`" + `text` + "`" + ` is empty\n\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reports"
                ],
                "summary": "create report",
                "parameters": [
                    {
                        "type": "string",
                        "description": "implemnter user id",
                        "name": "implementer",
                        "in": "query"
                    },
                    {
                        "description": "body",
                        "name": "report",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateReportReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.CreateReportResp"
                        }
                    }
                }
            }
        },
        "/reports/employee/{employee}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "# Description \n\n**Return reports list for employee**\n\n# Errors\n## 400 Bad request\n1. If employee path param is empty\nexample on: \n` + "`" + `` + "`" + `` + "`" + `\n/reports/employee/\n` + "`" + `` + "`" + `` + "`" + `\n\n## 403 Forbiden\n1. If you try to get reports of another user and you are not admin \n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reports"
                ],
                "summary": "get reports for employee",
                "parameters": [
                    {
                        "type": "string",
                        "description": "begin date of reports",
                        "name": "dateBegin",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "end date of reports",
                        "name": "dateEnd",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "employee user id",
                        "name": "employee",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.GetReportResp"
                            }
                        }
                    }
                }
            }
        },
        "/reports/v1/draft": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "# Description \n\n**Return a drafts**\n\nReturn a drafts for user sorted by date ascending\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "draft"
                ],
                "summary": "return a drafts for user",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.GetDraftsResp"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "# Description \n\n**Create draft**\n\nCreate a draft with specifed ` + "`" + `text` + "`" + ` and ` + "`" + `name` + "`" + `. ` + "`" + `implementer` + "`" + ` is optional query parameter, if not set in default - it's you.\n\n## Params\n### Query\n1. ` + "`" + `implementer` + "`" + ` - id of user, that implements this draft\n\n## Errors\n### 400 - Bad Request\n1. If ` + "`" + `text` + "`" + ` or ` + "`" + `name` + "`" + ` is empty\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "draft"
                ],
                "summary": "create a draft",
                "parameters": [
                    {
                        "description": "a body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateDraftReq"
                        }
                    },
                    {
                        "type": "string",
                        "description": "a id of implementer",
                        "name": "implementer",
                        "in": "query"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.CreateDraftResp"
                        }
                    }
                }
            }
        },
        "/reports/v1/draft/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "# Description \n\n**Return a draft**\n## Params\n### Path\n1. ` + "`" + `id` + "`" + ` - id of ` + "`" + `draft` + "`" + ` report\n\n## Errors\n### 404 - Not Found\n1. If not found ` + "`" + `draft` + "`" + ` with ` + "`" + `id` + "`" + ` param.\n### 400 - Bad Request\n1. If ` + "`" + `id` + "`" + ` param is not valid.\n### 403 - Forbiden\n1. If you are not owner of this ` + "`" + `draft` + "`" + `\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "draft"
                ],
                "summary": "return a draft",
                "parameters": [
                    {
                        "type": "string",
                        "description": "id of draft",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.GetDraftResp"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "# Description \n\n**Update draft**\n\nUpdate in draft only fields specifeid on body\n\nYou can update nothing but it's important to send empty json object:\n` + "`" + `` + "`" + `` + "`" + `json\n{\n\n}\n` + "`" + `` + "`" + `` + "`" + `\n\nIgnore ` + "`" + `text` + "`" + `, ` + "`" + `name` + "`" + ` or ` + "`" + `implementer` + "`" + ` if they are empty. For exmaple request like:\n` + "`" + `` + "`" + `` + "`" + `json\n{\n    \"name\": \"\"\n}\n` + "`" + `` + "`" + `` + "`" + `\nwill be ignore and return not updated draft\n\n## Params\n### Path\n1. ` + "`" + `id` + "`" + ` - id of ` + "`" + `draft` + "`" + ` report\n\n## Errors\n### 404 - Not Found\n1. If not found ` + "`" + `draft` + "`" + ` with ` + "`" + `id` + "`" + ` param.\n### 400 - Bad Request\n1. If ` + "`" + `id` + "`" + ` param is not valid.\n### 403 - Forbiden\n1. If you are not owner of this ` + "`" + `draft` + "`" + `\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "draft"
                ],
                "summary": "update a draft",
                "parameters": [
                    {
                        "type": "string",
                        "description": "id of draft",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "a body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateDraftReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateDraftResp"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "# Description \n\n**Delete draft**\n## Params\n### Path\n1. ` + "`" + `id` + "`" + ` - id of ` + "`" + `draft` + "`" + ` report\n\n## Errors\n### 404 - Not Found\n1. If not found ` + "`" + `draft` + "`" + ` with ` + "`" + `id` + "`" + ` param.\n### 400 - Bad Request\n1. If ` + "`" + `id` + "`" + ` param is not valid.\n### 403 - Forbiden\n1. If you are not owner of this ` + "`" + `draft` + "`" + `\n",
                "produces": [
                    "application/json",
                    "text/plain"
                ],
                "tags": [
                    "draft"
                ],
                "summary": "delete a draft",
                "parameters": [
                    {
                        "type": "string",
                        "description": "id of draft",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    }
                }
            }
        },
        "/reports/v1/report_from_draft/{id}": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "# Description \n\n**Create a report from draft**\n\nCreate report from specified draft and **delete** it\n\n## Params\n### Path\n1. ` + "`" + `id` + "`" + ` - id of ` + "`" + `draft` + "`" + ` report\n\n## Errors\n### 404 - Not Found\n1. If not found ` + "`" + `draft` + "`" + ` with ` + "`" + `id` + "`" + ` param.\n### 400 - Bad Request\n1. If ` + "`" + `id` + "`" + ` param is not valid.\n### 403 - Forbiden\n1. If you are not owner of this ` + "`" + `draft` + "`" + `\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reports"
                ],
                "summary": "create report from draft",
                "parameters": [
                    {
                        "type": "string",
                        "description": "id of draft",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.CreateReportResp"
                        }
                    }
                }
            }
        },
        "/reports/v2/reports": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "# Description \n\n**Return a list of reports**\n\n## Params\n### Query\n1. ` + "`" + `offset` + "`" + ` - the offset of the searching should be greater or equal 0, else it will be ignore\n2. ` + "`" + `limit` + "`" + ` - the limit of getted reports, should be greater or equal 1, else it will be ignore\n3. ` + "`" + `sortBy` + "`" + ` - the sorting of reports, should be in format ` + "`" + `field_1:ordering` + "`" + `, where ` + "`" + `ordering` + "`" + ` can be: \"asc\", \"ASC\", \"1\" or \"desc\", \"DESC\", \"-1\". Can be passed more than one ` + "`" + `sortBy` + "`" + `.\n    3.1. ` + "`" + `name:ordering` + "`" + ` - sort by name\n    3.2. ` + "`" + `date:ordering` + "`" + ` - sort by date\n4. ` + "`" + `dateBegin` + "`" + ` - find reports whose date greater or equal then passed date. Date should be in format RFC3339 for example ` + "`" + `dateBegin=2019-10-12T07:20:50.52Z` + "`" + `\n5. ` + "`" + `dateEnd` + "`" + ` - find reports whose date lower or equal then passed date. Date should be in format RFC3339 for example ` + "`" + `dateEnd=2019-10-12T07:20:50.52Z` + "`" + `\n6. ` + "`" + `match` + "`" + ` - passed match params into filtering. match should be in format ` + "`" + `field_1:value_1` + "`" + `, else it will be ignore. Can be passed more than one ` + "`" + `match` + "`" + `.\n    6.1. ` + "`" + `name:value` + "`" + ` - find reports whose name is like passed ` + "`" + `value` + "`" + `\n    6.2. ` + "`" + `date:value` + "`" + ` - find reports whose date is equal passed ` + "`" + `value` + "`" + `, date should be in format RFC3339, for example ` + "`" + `match=date:2019-10-12T07:20:50.52Z` + "`" + `\n    6.3. ` + "`" + `assignees.implementer:value` + "`" + ` - find reports whose implementer is equal passed ` + "`" + `value` + "`" + `, can work only if you are admin, else it will be unset\n    6.4. ` + "`" + `assignees.reporter:value` + "`" + ` - find reports whose reporter is equal passed ` + "`" + `value` + "`" + `, can work only if you are admin, else it will be unset\n7. ` + "`" + `onlyApproved` + "`" + ` - filter reports on their approve state. If true return only reports that approved.\n## Responce fields\n1. ` + "`" + `count` + "`" + ` - the current count of elements in ` + "`" + `items` + "`" + ` field.\n2. ` + "`" + `items` + "`" + ` - the getted reports.\n3. ` + "`" + `hasMore` + "`" + ` - indecate that you can get new reports by increase ` + "`" + `offset` + "`" + ` param.\n4. ` + "`" + `limit` + "`" + ` - the passed ` + "`" + `limit` + "`" + ` param.\n5. ` + "`" + `offset` + "`" + ` - the passed ` + "`" + `offset` + "`" + ` param.\n6. ` + "`" + `totalResult` + "`" + ` - how mush reports you can get by passing this request with this filtering params.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reports"
                ],
                "summary": "return reports according to filters",
                "parameters": [
                    {
                        "type": "number",
                        "description": "offset",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "number",
                        "description": "limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "date in RFC3339",
                        "name": "dateBegin",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "date in RFC3339",
                        "name": "dateEnd",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "match query",
                        "name": "match",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "sorting query",
                        "name": "sortBy",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "filtering on approved",
                        "name": "onlyApproved",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.GetReportsRespV2"
                        }
                    }
                }
            }
        },
        "/reports/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "# Description \n\n**Return a report**\n\n# Errors\n## 404 Not found\n1. If report is not found\n\n## 400 Bad request\n1. If ` + "`" + `id` + "`" + ` param is not valid\n\n## 403 Forbiden\n1. If you try to get report of another user and you are not admin \n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reports"
                ],
                "summary": "return report",
                "parameters": [
                    {
                        "type": "string",
                        "description": "id of report",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.GetReportResp"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.CreateDraftReq": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "text": {
                    "type": "string"
                }
            }
        },
        "dto.CreateDraftResp": {
            "type": "object",
            "properties": {
                "assignees": {
                    "$ref": "#/definitions/dto.GetAssignesResp"
                },
                "date": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "text": {
                    "type": "string"
                }
            }
        },
        "dto.CreateReportReq": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "text": {
                    "type": "string"
                }
            }
        },
        "dto.CreateReportResp": {
            "type": "object",
            "properties": {
                "assignees": {
                    "$ref": "#/definitions/dto.GetAssigneesResp"
                },
                "date": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "text": {
                    "type": "string"
                }
            }
        },
        "dto.GetAssigneesResp": {
            "type": "object",
            "properties": {
                "implementer": {
                    "type": "string"
                },
                "reporter": {
                    "type": "string"
                }
            }
        },
        "dto.GetAssignesResp": {
            "type": "object",
            "properties": {
                "implementer": {
                    "type": "string"
                },
                "reporter": {
                    "type": "string"
                }
            }
        },
        "dto.GetDraftResp": {
            "type": "object",
            "properties": {
                "assignees": {
                    "$ref": "#/definitions/dto.GetAssignesResp"
                },
                "date": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "text": {
                    "type": "string"
                }
            }
        },
        "dto.GetDraftsResp": {
            "type": "object",
            "properties": {
                "drafts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.GetDraftResp"
                    }
                }
            }
        },
        "dto.GetReportResp": {
            "type": "object",
            "properties": {
                "assignees": {
                    "$ref": "#/definitions/dto.GetAssigneesResp"
                },
                "date": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "text": {
                    "type": "string"
                }
            }
        },
        "dto.GetReportsRespV2": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "hasMore": {
                    "type": "boolean"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.GetReportResp"
                    }
                },
                "limit": {
                    "type": "integer"
                },
                "offset": {
                    "type": "integer"
                },
                "totalResult": {
                    "type": "integer"
                }
            }
        },
        "dto.UpdateDraftReq": {
            "type": "object",
            "properties": {
                "implementer": {
                    "type": "string",
                    "x-nullable": true
                },
                "name": {
                    "type": "string",
                    "x-nullable": true
                },
                "text": {
                    "type": "string",
                    "x-nullable": true
                }
            }
        },
        "dto.UpdateDraftResp": {
            "type": "object",
            "properties": {
                "assignees": {
                    "$ref": "#/definitions/dto.GetAssignesResp"
                },
                "date": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "text": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "/api",
	Schemes:          []string{},
	Title:            "ITLab-Reports API",
	Description:      "This is server to work with reports\n\n[Source-code repository](https://github.com/RTUITLab/ITLab-Reports-Back)\n\nAll endpoints error have next structer\n\n```js\n{\n    \"error\": \"some_error\"\n}\n```",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
