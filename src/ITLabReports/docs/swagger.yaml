basePath: /api
definitions:
  dto.CreateDraftReq:
    properties:
      name:
        type: string
      text:
        type: string
    type: object
  dto.CreateDraftResp:
    properties:
      assignees:
        $ref: '#/definitions/dto.GetAssignesResp'
      date:
        type: string
      id:
        type: string
      name:
        type: string
      text:
        type: string
    type: object
  dto.CreateReportReq:
    properties:
      name:
        type: string
      text:
        type: string
    type: object
  dto.CreateReportResp:
    properties:
      assignees:
        $ref: '#/definitions/dto.GetAssigneesResp'
      date:
        type: string
      id:
        type: string
      name:
        type: string
      text:
        type: string
    type: object
  dto.GetAssigneesResp:
    properties:
      implementer:
        type: string
      reporter:
        type: string
    type: object
  dto.GetAssignesResp:
    properties:
      implementer:
        type: string
      reporter:
        type: string
    type: object
  dto.GetDraftResp:
    properties:
      assignees:
        $ref: '#/definitions/dto.GetAssignesResp'
      date:
        type: string
      id:
        type: string
      name:
        type: string
      text:
        type: string
    type: object
  dto.GetDraftsResp:
    properties:
      drafts:
        items:
          $ref: '#/definitions/dto.GetDraftResp'
        type: array
    type: object
  dto.GetReportResp:
    properties:
      assignees:
        $ref: '#/definitions/dto.GetAssigneesResp'
      date:
        type: string
      id:
        type: string
      name:
        type: string
      text:
        type: string
    type: object
  dto.GetReportsRespV2:
    properties:
      count:
        type: integer
      hasMore:
        type: boolean
      items:
        items:
          $ref: '#/definitions/dto.GetReportResp'
        type: array
      limit:
        type: integer
      offset:
        type: integer
      totalResult:
        type: integer
    type: object
  dto.UpdateDraftReq:
    properties:
      implementer:
        type: string
        x-nullable: true
      name:
        type: string
        x-nullable: true
      text:
        type: string
        x-nullable: true
    type: object
  dto.UpdateDraftResp:
    properties:
      assignees:
        $ref: '#/definitions/dto.GetAssignesResp'
      date:
        type: string
      id:
        type: string
      name:
        type: string
      text:
        type: string
    type: object
info:
  contact: {}
  description: |-
    This is server to work with reports

    [Source-code repository](https://github.com/RTUITLab/ITLab-Reports-Back)

    All endpoints error have next structer

    ```js
    {
        "error": "some_error"
    }
    ```
  title: ITLab-Reports API
  version: "1.0"
paths:
  /reports:
    get:
      description: "# Description \n\n**Return a list of reports**\n\n## If you are
        admin\nreturn a list of reports of all user\n\n## If you are a user\nreturn
        a list of your reports\n\n## Params\n### Query\n1. `sorted_by` - sort by `name`
        or `date`. In both sort ascending\n"
      parameters:
      - description: sort by this field
        enum:
        - name
        - date
        in: query
        name: sorted_by
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.GetReportResp'
            type: array
      security:
      - ApiKeyAuth: []
      summary: get report list
      tags:
      - reports
    post:
      description: "create report\n# Description \n\n**Create a report**\n\nHave `implementer`
        query param that Indicates who the report is about, if not specifed - by default
        it's you.\n\n`name` field is optional so you can create report with two ways:\n\n##
        Creating by only ```text``` field\n\nTo create by only text field you should
        to set in text field ```name``` of report and field ```text``` and separet
        it with ```@\\n\\t\\n@```\nFor example next body will create report with ```name```
        report_text and with ```text``` report text\n```json\n{\n    \"text\": \"report_text@\\n\\t\\n@report_text\"\n}\n```\n\n##
        Creating by ```text``` and ```name``` fields\n\nIt's more **preferred** method
        just send next body:\n```json\n{\n    \"name\": \"report_name\",\n    \"text\":
        \"report_text\"\n}\n```\n\n# Errors\n\n## 400 Bad request\n1. If `name` and
        `text` fields is empty\n2. If `name` is not empty, `text` is empty\n\n"
      parameters:
      - description: implemnter user id
        in: query
        name: implementer
        type: string
      - description: body
        in: body
        name: report
        required: true
        schema:
          $ref: '#/definitions/dto.CreateReportReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.CreateReportResp'
      security:
      - ApiKeyAuth: []
      summary: create report
      tags:
      - reports
  /reports/{id}:
    get:
      description: "# Description \n\n**Return a report**\n\n# Errors\n## 404 Not
        found\n1. If report is not found\n\n## 400 Bad request\n1. If `id` param is
        not valid\n\n## 403 Forbiden\n1. If you try to get report of another user
        and you are not admin \n"
      parameters:
      - description: id of report
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GetReportResp'
      security:
      - ApiKeyAuth: []
      summary: return report
      tags:
      - reports
  /reports/employee/{employee}:
    get:
      description: "# Description \n\n**Return reports list for employee**\n\n# Errors\n##
        400 Bad request\n1. If employee path param is empty\nexample on: \n```\n/reports/employee/\n```\n\n##
        403 Forbiden\n1. If you try to get reports of another user and you are not
        admin \n"
      parameters:
      - description: begin date of reports
        in: query
        name: dateBegin
        type: string
      - description: end date of reports
        in: query
        name: dateEnd
        type: string
      - description: employee user id
        in: path
        name: employee
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.GetReportResp'
            type: array
      security:
      - ApiKeyAuth: []
      summary: get reports for employee
      tags:
      - reports
  /reports/v1/draft:
    get:
      description: "# Description \n\n**Return a drafts**\n\nReturn a drafts for user
        sorted by date ascending\n"
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GetDraftsResp'
      security:
      - ApiKeyAuth: []
      summary: return a drafts for user
      tags:
      - draft
    post:
      consumes:
      - application/json
      description: "# Description \n\n**Create draft**\n\nCreate a draft with specifed
        `text` and `name`. `implementer` is optional query parameter, if not set in
        default - it's you.\n\n## Params\n### Query\n1. `implementer` - id of user,
        that implements this draft\n\n## Errors\n### 400 - Bad Request\n1. If `text`
        or `name` is empty\n"
      parameters:
      - description: a body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.CreateDraftReq'
      - description: a id of implementer
        in: query
        name: implementer
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.CreateDraftResp'
      security:
      - ApiKeyAuth: []
      summary: create a draft
      tags:
      - draft
  /reports/v1/draft/{id}:
    delete:
      description: "# Description \n\n**Delete draft**\n## Params\n### Path\n1. `id`
        - id of `draft` report\n\n## Errors\n### 404 - Not Found\n1. If not found
        `draft` with `id` param.\n### 400 - Bad Request\n1. If `id` param is not valid.\n###
        403 - Forbiden\n1. If you are not owner of this `draft`\n"
      parameters:
      - description: id of draft
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      - text/plain
      responses:
        "204":
          description: ""
      security:
      - ApiKeyAuth: []
      summary: delete a draft
      tags:
      - draft
    get:
      description: "# Description \n\n**Return a draft**\n## Params\n### Path\n1.
        `id` - id of `draft` report\n\n## Errors\n### 404 - Not Found\n1. If not found
        `draft` with `id` param.\n### 400 - Bad Request\n1. If `id` param is not valid.\n###
        403 - Forbiden\n1. If you are not owner of this `draft`\n"
      parameters:
      - description: id of draft
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GetDraftResp'
      security:
      - ApiKeyAuth: []
      summary: return a draft
      tags:
      - draft
    put:
      consumes:
      - application/json
      description: "# Description \n\n**Update draft**\n\nUpdate in draft only fields
        specifeid on body\n\nYou can update nothing but it's important to send empty
        json object:\n```json\n{\n\n}\n```\n\nIgnore `text`, `name` or `implementer`
        if they are empty. For exmaple request like:\n```json\n{\n    \"name\": \"\"\n}\n```\nwill
        be ignore and return not updated draft\n\n## Params\n### Path\n1. `id` - id
        of `draft` report\n\n## Errors\n### 404 - Not Found\n1. If not found `draft`
        with `id` param.\n### 400 - Bad Request\n1. If `id` param is not valid.\n###
        403 - Forbiden\n1. If you are not owner of this `draft`\n"
      parameters:
      - description: id of draft
        in: path
        name: id
        required: true
        type: string
      - description: a body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateDraftReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UpdateDraftResp'
      security:
      - ApiKeyAuth: []
      summary: update a draft
      tags:
      - draft
  /reports/v1/report_from_draft/{id}:
    post:
      description: "# Description \n\n**Create a report from draft**\n\nCreate report
        from specified draft and **delete** it\n\n## Params\n### Path\n1. `id` - id
        of `draft` report\n\n## Errors\n### 404 - Not Found\n1. If not found `draft`
        with `id` param.\n### 400 - Bad Request\n1. If `id` param is not valid.\n###
        403 - Forbiden\n1. If you are not owner of this `draft`\n"
      parameters:
      - description: id of draft
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.CreateReportResp'
      security:
      - ApiKeyAuth: []
      summary: create report from draft
      tags:
      - reports
  /reports/v2/reports:
    get:
      description: "# Description \n\n**Return a list of reports**\n\n## Params\n###
        Query\n1. `offset` - the offset of the searching should be greater or equal
        0, else it will be ignore\n2. `limit` - the limit of getted reports, should
        be greater or equal 1, else it will be ignore\n3. `sortBy` - the sorting of
        reports, should be in format `field_1:ordering`, where `ordering` can be:
        \"asc\", \"ASC\", \"1\" or \"desc\", \"DESC\", \"-1\". Can be passed more
        than one `sortBy`.\n    3.1. `name:ordering` - sort by name\n    3.2. `date:ordering`
        - sort by date\n4. `dateBegin` - find reports whose date greater or equal
        then passed date. Date should be in format RFC3339 for example `dateBegin=2019-10-12T07:20:50.52Z`\n5.
        `dateEnd` - find reports whose date lower or equal then passed date. Date
        should be in format RFC3339 for example `dateEnd=2019-10-12T07:20:50.52Z`\n6.
        `match` - passed match params into filtering. match should be in format `field_1:value_1`,
        else it will be ignore. Can be passed more than one `match`.\n    6.1. `name:value`
        - find reports whose name is like passed `value`\n    6.2. `date:value` -
        find reports whose date is equal passed `value`, date should be in format
        RFC3339, for example `match=date:2019-10-12T07:20:50.52Z`\n    6.3. `assignees.implementer:value`
        - find reports whose implementer is equal passed `value`, can work only if
        you are admin, else it will be unset\n    6.4. `assignees.reporter:value`
        - find reports whose reporter is equal passed `value`, can work only if you
        are admin, else it will be unset\n7. `approvedState` - the state of reports
        approved. Can be one of: `approved`, `notApproved`, `all`.\n## Responce fields\n1.
        `count` - the current count of elements in `items` field.\n2. `items` - the
        getted reports.\n3. `hasMore` - indecate that you can get new reports by increase
        `offset` param.\n4. `limit` - the passed `limit` param.\n5. `offset` - the
        passed `offset` param.\n6. `totalResult` - how mush reports you can get by
        passing this request with this filtering params."
      parameters:
      - description: offset
        in: query
        name: offset
        type: number
      - description: limit
        in: query
        name: limit
        type: number
      - description: date in RFC3339
        in: query
        name: dateBegin
        type: string
      - description: date in RFC3339
        in: query
        name: dateEnd
        type: string
      - description: match query
        in: query
        name: match
        type: string
      - description: sorting query
        in: query
        name: sortBy
        type: string
      - description: filtering on approved state
        enum:
        - approved
        - notApproved
        - all
        in: query
        name: approvedState
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GetReportsRespV2'
      security:
      - ApiKeyAuth: []
      summary: return reports according to filters
      tags:
      - reports
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
