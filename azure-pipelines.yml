name: $(BuildID)-$(Build.SourceBranchName)

resources:
- repo: self

variables:
  tag: '$(Build.BuildId)'
  CGO_ENABLED: 0
  GOOS: linux

stages:
- stage: Build
  displayName: Build image
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: Go@0
      displayName: build
      inputs:
        command: 'build'
        arguments: '-a -installsuffix cgo -o deploy/main -v'
        workingDirectory: 'src/ITLabReports/api'
    - task: PublishPipelineArtifact@1
      displayName: 'Publish build artifact'
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)'
        artifact: 'itlab-reports-build'
        publishLocation: 'pipeline'

- stage: Test
  displayName: Test reports service
  jobs:
  - job: Test
    strategy:
      matrix:
        testmace:
          serviceName: testmace
          artifactsFolder: tests/e2e/out
          reportsPattern: 'testmace*.xml'
        karate:
          serviceName: karate
          artifactsFolder: tests/e2e/karate-out
          reportsPattern: '*.xml'
    displayName: Test with

    pool:
      vmImage: 'ubuntu-latest'

    steps:
    - task: DownloadPipelineArtifact@2
      inputs:
        artifactName: 'itlab-reports-build'
        buildType: 'current'
        targetPath: './tests/e2e/api/itlab-reports-build'
    - task: CmdLine@2
      displayName: run api
      inputs:
        script: 'docker-compose --ansi never up -d test-api'
        workingDirectory: './tests/e2e/'
    - task: CmdLine@2
      displayName: run $(serviceName)
      inputs:
        script: 'docker-compose --ansi never up $(serviceName)'
        workingDirectory: './tests/e2e/'
    - task: CmdLine@2
      displayName: show logs
      inputs:
        script: 'docker-compose --ansi never logs test-api'
        workingDirectory: './tests/e2e/'
    - task: CopyFiles@2
      inputs:
        SourceFolder: $(artifactsFolder)
        Contents: '**'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
        CleanTargetFolder: true
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: $(reportsPattern)
        searchFolder: '$(Build.ArtifactStagingDirectory)'
        failTaskOnFailedTests: true
