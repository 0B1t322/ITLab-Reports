name: $(BuildID)-$(Build.SourceBranchName)

resources:
- repo: self

variables:
  tag: '$(Build.BuildId)'
  CGO_ENABLED: 0
  GOOS: linux
  ${{ if notIn(variables['Build.SourceBranchName'], 'master', 'develop') }}:
    buildImage: false
    deployService: false
    deployEnvironment: 'no'
    imageTags: 'no'
    serviceName: 'no'
  ${{ if eq(variables['Build.SourceBranchName'], 'develop') }}:
    buildImage: true
    deployService: true
    deployEnvironment: development
    imageTags: |
      $(Build.BuildId)
      develop
    serviceName: itlab-develop_reports-back
  ${{ if eq(variables['Build.SourceBranchName'], 'master') }}:
    buildImage: true
    deployService: true
    deployEnvironment: production
    imageTags: |
      $(Build.BuildId)
      latest
    serviceName: itlab_reports-back

stages:
- stage: Build
  displayName: Build image
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: Go@0
      displayName: build
      inputs:
        command: 'build'
        arguments: '-a -installsuffix cgo -o $(Pipeline.Workspace)/main -v'
        workingDirectory: 'src/ITLabReports/api'
    - task: CopyFiles@2
      inputs:
        SourceFolder: 'deploy'
        Contents: 'Dockerfile'
        TargetFolder: '$(Pipeline.Workspace)'
        OverWrite: true
    - task: PublishPipelineArtifact@1
      displayName: 'Publish build artifact'
      inputs:
        targetPath: '$(Pipeline.Workspace)'
        artifact: 'itlab-reports-build'
        publishLocation: 'pipeline'

- stage: Test
  condition: succeeded()
  displayName: Test reports service
  jobs:
  - job: Test
    strategy:
      matrix:
        testmace:
          serviceName: testmace
          artifactsFolder: tests/e2e/out
          reportsPattern: 'testmace*.xml'
        karate:
          serviceName: karate
          artifactsFolder: tests/e2e/karate-out
          reportsPattern: '*.xml'
    displayName: Test with

    pool:
      vmImage: 'ubuntu-latest'

    steps:
    - task: DownloadPipelineArtifact@2
      inputs:
        artifactName: 'itlab-reports-build'
        buildType: 'current'
        targetPath: './tests/e2e/api/itlab-reports-build'
    - task: CmdLine@2
      displayName: run api
      inputs:
        script: 'docker-compose --ansi never up -d test-api'
        workingDirectory: './tests/e2e/'
    - task: CmdLine@2
      displayName: run $(serviceName)
      inputs:
        script: 'docker-compose --ansi never up $(serviceName)'
        workingDirectory: './tests/e2e/'
    - task: CmdLine@2
      displayName: show logs
      inputs:
        script: 'docker-compose --ansi never logs test-api'
        workingDirectory: './tests/e2e/'
    - task: CopyFiles@2
      inputs:
        SourceFolder: $(artifactsFolder)
        Contents: '**'
        TargetFolder: '$(Pipeline.Workspace)'
        CleanTargetFolder: true
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: $(reportsPattern)
        searchFolder: '$(Pipeline.Workspace)'
        failTaskOnFailedTests: true

- stage: buildImage
  condition: ${{variables.buildImage}}
  displayName: Pack docker image
  jobs:
  - job: build
    displayName: Build
    steps:
    - task: Docker@2
      inputs:
        containerRegistry: 'rtuitlab connection by admin'
        repository: 'rtuitlab/itlab-reports'
        command: 'buildAndPush'
        Dockerfile: '$(Pipeline.Workspace)/itlab-reports-build/Dockerfile'
        buildContext: '$(Pipeline.Workspace)/itlab-reports-build'
        tags: ${{variables.ImageTags}}
- stage: deploy
  displayName: Deploy
  condition: and(succeeded(), ${{variables.deployService}})
  jobs:
    - deployment: Deploy
      pool:
        vmImage: 'ubuntu-latest'
      environment: ${{variables.deployEnvironment}}
      strategy:
        runOnce:
          deploy:
            steps:
              - download: none
              - task: SSH@0
                inputs:
                  sshEndpoint: 'swarm manager'
                  runOptions: 'commands'
                  commands: 'docker service update --image rtuitlab/itlab-reports:$(Build.BuildId) ${{variables.serviceName}} --with-registry-auth'
                  readyTimeout: '20000'